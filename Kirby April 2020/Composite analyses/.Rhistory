sitecov$Jackpine_50JackpineMixCD_50<-NULL
sitecov$Jackpine_50JackpineMixWet_50<-NULL
sitecov$Tamarack_50<-sitecov$Tamarack_50+sitecov$TamarackMixCD_50+sitecov$TamarackMixDC_50
sitecov$TamarackMixCD_50<-NULL
sitecov$TamarackMixDC_50<-NULL
sitecov$Blackspruce_50<-sitecov$Blackspruce_50+sitecov$BlackspruceMixCD_50
sitecov$BlackspruceMixCD_50<-NULL
sitecov$Whitebirch_50<-sitecov$Whitebirch_50+sitecov$WhitebirchMixD_50
sitecov$WhitebirchMixD_50<-NULL
sitecov$Whitespruce_50<-sitecov$Whitespruce_50+sitecov$WhitespruceMixWet_50
sitecov$WhitespruceMixWet_50<-NULL
sitecov$Tremblingaspen_150<-sitecov$Tremblingaspen_150+sitecov$TremblingaspenMixCD_150+sitecov$TremblingaspenMixD_150+sitecov$TremblingaspenMixDC_150
sitecov$TremblingaspenMixCD_150<-NULL
sitecov$TremblingaspenMixD_150<-NULL
sitecov$TremblingaspenMixDC_150<-NULL
sitecov$Jackpine_150<-sitecov$Jackpine_150+sitecov$JackpineMixCD_150+sitecov$JackpineMixWet_150
sitecov$Jackpine_150JackpineMixCD_150<-NULL
sitecov$Jackpine_150JackpineMixWet_150<-NULL
sitecov$Tamarack_150<-sitecov$Tamarack_150+sitecov$TamarackMixCD_150+sitecov$TamarackMixDC_150
sitecov$TamarackMixCD_150<-NULL
sitecov$TamarackMixDC_150<-NULL
sitecov$Blackspruce_150<-sitecov$Blackspruce_150+sitecov$BlackspruceMixCD_150+sitecov$BlackspruceMixDC_150
sitecov$BlackspruceMixCD_150<-NULL
sitecov$BlackspruceMixDC_150<-NULL
sitecov$Whitebirch_150<-sitecov$Whitebirch_150+sitecov$WhitebirchMixD_150+sitecov$WhitebirchMixDC_150
sitecov$WhitebirchMixD_150<-NULL
sitecov$WhitebirchMixDC_150<-NULL
sitecov$Whitespruce_150<-sitecov$Whitespruce_150+sitecov$WhitespruceMixWet_150+sitecov$WhitespruceMixC_150+sitecov$WhitespruceMixCD_150
sitecov$WhitespruceMixWet_150<-NULL
sitecov$WhitespruceMixC_150<-NULL
sitecov$WhitespruceMixCD_150<-NULL
sitecov$Tremblingaspen_500<-sitecov$Tremblingaspen_500+sitecov$TremblingaspenMixCD_500+sitecov$TremblingaspenMixD_500+sitecov$TremblingaspenMixDC_500
sitecov$TremblingaspenMixCD_500<-NULL
sitecov$TremblingaspenMixD_500<-NULL
sitecov$TremblingaspenMixDC_500<-NULL
sitecov$Jackpine_500<-sitecov$Jackpine_500+sitecov$JackpineMixCD_500+sitecov$JackpineMixWet_500#+sitecov$Jackpine_500JackpineMixC_500
#sitecov$Jackpine_500JackpineMixC_500<-NULL
sitecov$Jackpine_500JackpineMixCD_500<-NULL
sitecov$Jackpine_500JackpineMixWet_500<-NULL
sitecov$Tamarack_500<-sitecov$Tamarack_500+sitecov$TamarackMixCD_500+sitecov$TamarackMixDC_500
sitecov$TamarackMixCD_500<-NULL
sitecov$TamarackMixDC_500<-NULL
sitecov$Blackspruce_500<-sitecov$Blackspruce_500+sitecov$BlackspruceMixCD_500+sitecov$BlackspruceMixDC_500
sitecov$BlackspruceMixCD_500<-NULL
sitecov$BlackspruceMixDC_500<-NULL
sitecov$Whitebirch_500<-sitecov$Whitebirch_500+sitecov$WhitebirchMixD_500+sitecov$WhitebirchMixDC_500
sitecov$WhitebirchMixD_500<-NULL
sitecov$WhitebirchMixDC_500<-NULL
sitecov$Whitespruce_500<-sitecov$Whitespruce_500+sitecov$WhitespruceMixWet_500+sitecov$WhitespruceMixC_500+sitecov$WhitespruceMixCD_500
sitecov$WhitespruceMixWet_500<-NULL
sitecov$WhitespruceMixC_500<-NULL
sitecov$WhitespruceMixCD_500<-NULL
sitecov$EASTING<-NULL
#Composite model: ALFL
names<-c("ALFL")
for(i in names){
birddata<-read.csv(paste0("0_data/processed/unmarked/",i,".csv"),header=TRUE)
count=birddata[,2:5]
#same variable names in both data frames
#3. Now construct unmarkedPCount frame for mixture models
umf <- unmarkedFramePCount(y=count, siteCovs=sitecov,
obsCovs=list(Julian=Julian[,2:5]))# organize data
umf                            # take a look
summary(umf)
obsCovs(umf) <- scale(obsCovs(umf))
siteCovs(umf) <- scale(siteCovs(umf))
#parallel processing and using dredge
clusterType<-if(length(find.package("snow",
quiet=TRUE))) "SOCK" else "PSOCK"
clust<-try(makeCluster(getOption("cl.cores",4), type=clusterType))
clusterEvalQ(clust, library(unmarked))
clusterExport(clust, "umf")
#5. Run mixture models
#to dredge with parallel processing:
###global multilayer model
global_pcount <-pcount( ~ Julian
~Blackspruce_500+
Species_Popu_Tre_v1_50+
Structure_Biomass_TotalLiveAboveGround_v1_50+
S150.sd_PercCanopyDensity +
S150.VPD__100.150cm_Grid.1x1m.mean +
S150.VPD__150.200cm_Grid.1x1m.mean,
mixture="P",
data = umf)
print(paste0('Global multilayer model run for ',i))
site.covs.mat<-sitecov[,c("Blackspruce_500",
"Species_Popu_Tre_v1_50",
"Structure_Biomass_TotalLiveAboveGround_v1_50",
"S150.sd_PercCanopyDensity",
"S150.VPD__100.150cm_Grid.1x1m.mean",
"S150.VPD__150.200cm_Grid.1x1m.mean")]
# Create logical matrix
smat <- outer(1:6, 1:6, vCorrelated, data = site.covs.mat)
nm <- colnames(site.covs.mat)#[-1]
dimnames(smat) <- list(nm, nm)
system.time(dredge_pcount<-pdredge(global_pcount,
subset=smat,
rank=AIC,
m.lim=c(1,3),
cluster=clust,
extra = "R^2"))#,fixed=c("p(Julian)")
print(paste0('Multilayer model dredge run for ',i))
length(dredge_pcount)
nrow(dredge_pcount)#
bestmodels<-get.models(dredge_pcount, subset=delta<32.1)#x
#absolute model fit
df.dredge<-data.frame(dredge_pcount)
df.dredge<-df.dredge[df.dredge$delta<32.1,]
r2<-df.dredge$R.2
#write.csv(df.dredge, file=paste0("0_data/processed/unmarked/results/",i,"dredge.csv"))
ms<-modSel(fitList(fits = structure(bestmodels, names = model.names(bestmodels,
labels = getAllTerms(global_pcount)))))
ms.coef<-coef(ms)
ms.SE<-SE(ms)
output<-as(ms,"data.frame")
outputB<-cbind(output,r2)
write.csv(outputB, file=paste0("0_data/processed/unmarked/results/",i,"bestmodels.csv"))
print(paste0('Multilayer model outputs printed for ',i))
#get variables and estimates of their uncertainty from top model
topfinalmodel<-get.models(dredge_pcount, subset = 1)[[1]]
Estimate<-coef(topfinalmodel, type='state', altNames = TRUE)
SE<-SE(topfinalmodel, type='state', altNames = TRUE)
lam.df<-data.frame(Estimate,SE)
lam.df$Predictor<-row.names(lam.df)
Estimate<-coef(topfinalmodel, type='det', altNames = TRUE)
SE<-SE(topfinalmodel, type='det', altNames = TRUE)
P.df<-data.frame(Estimate,SE)
P.df$Predictor<-row.names(P.df)
total.df<-bind_rows(lam.df,P.df)
total.df$LCL<-total.df$Estimate-1.96*total.df$SE
total.df$UCL<-total.df$Estimate+1.96*total.df$SE
total.df<-total.df[,c("Predictor","Estimate","SE","LCL","UCL")]
write.csv(total.df, file=paste0("3_outputs/tables/topmodel",i,".csv"))
#box plot
#shorten predictor names
total.df$Predictor<- gsub("_v1_", "_", total.df$Predictor) # new descriptor for harvest class in v.2018 cure4insect
total.df$Predictor<- gsub("Structure_Stand_", "", total.df$Predictor) # new descriptor for harvest class in v.2018 cure4insect
total.df$Predictor<- gsub("Species_", "", total.df$Predictor) # new descriptor for harvest class in v.2018 cure4insect
total.df$Predictor<- gsub("SpeciesGroups_", "", total.df$Predictor) # new descriptor for harvest class in v.2018 cure4insect
total.df$Predictor<- gsub("_Grid.1x1m.mean", "", total.df$Predictor) # new descriptor for harvest class in v.2018 cure4insect
#total.df<-total.df[!total.df$Predictor=="lam(Int)",]
#total.df<-total.df[!total.df$Predictor=="p(Int)",]
GG<-ggplot(total.df, aes(x=Predictor, y=Estimate))+
geom_point(aes(x=Predictor, y=Estimate))+
geom_errorbar(aes(ymin=LCL,ymax=UCL))+
geom_hline(yintercept=0)+
xlab("Predictor")+
ylab(paste0("Effect on lam(",i,") or det(",i,")"))+my.theme+
scale_x_discrete(labels = function(x) lapply(strwrap(x, width = 10, simplify = FALSE), paste, collapse="\n"))
ggsave(paste0("3_outputs/figures/",i,"topmodel.png"), plot=GG, width=12, height=6, units=c("in"), dpi=300)
#An estimate of overdispersion relative to the fitted model.
chat(topfinalmodel, "m")#0.6638707 (marginal)
chat(topfinalmodel, "s")#0.7722949 (site-sum)
chat(topfinalmodel, "o")#1.186202 (observation)
residcov(topfinalmodel, xlim=c(-10,10))
#plot residuals against fitted values
residfit(topfinalmodel, type="m") # (marginal)
residfit(topfinalmodel, "s") # (site-sum)
residfit(topfinalmodel, "o") #(observation)
#randomized quantile residuals vs. normal standardized quantiles
residqq(topfinalmodel, type = "site-sum", main = "Residual qq plot",
plotLine = TRUE)
residqq(topfinalmodel, type = "o", main = "Residual qq plot",
plotLine = TRUE)
#residuals look good: hug the centre line of various Q-Q plots, do
#not vary in any obvious way with increasing fitted values, and
#c-hat values for the 3 kinds of quantile residuals are approximately 1
#get predictions from best model and validate best model
umf_val<-umf#same data set set up as an occupancy modelling frame
p.hat <- predict(topfinalmodel, newdata=umf_val, type="det")[,1]
lam.hat <- predict(topfinalmodel, newdata=umf_val, type="state")[,1]
pred.abund<-data.frame(lam.hat)
pred.abund$SS<-Kirby.coord$SS
stationdata_sp <- merge(Kirby.coord, pred.abund, by.x = "SS", by.y = "SS")
str(stationdata_sp)
plot(stationdata_sp, col=stationdata_sp$lam.hat)
stationdata_sp@bbox
stationdata_sp@coords
#plot(kirby)
#Create a function to generate a continuous color palette
rbPal <- colorRampPalette(c('red','green'))
plot(stationdata_sp, add=TRUE, pch=20, col=rbPal(10)[as.numeric(cut(stationdata_sp$lam.hat, breaks = 10))])
# Replace point boundary extent with that of Kirby grid
coords = matrix(c(488000, 6131500,
488000, 6137500,
496000, 6137500,
496000, 6131500,
488000, 6131500),
ncol = 2, byrow = TRUE)
P1 = Polygon(coords)
Ps1 = SpatialPolygons(list(Polygons(list(P1), ID = "a")), proj4string=CRS("+proj=utm +zone=12 +ellps=GRS80 +units=m +no_defs"))
#plot(Ps1, axes = TRUE)
#plot(stationdata_sp, add=TRUE, pch=20, col=rbPal(10)[as.numeric(cut(stationdata_sp$lam.hat, breaks = 10))])
stationdata_sp@bbox<-Ps1@bbox
tm_shape(Ps1) + tm_polygons() +
tm_shape(stationdata_sp) +
tm_dots(col="lam.hat", palette = "RdBu", auto.palette.mapping = FALSE,
title=paste0("Predicted ",i," abund \n(per station)"), size=0.7) +
tm_legend(legend.outside=TRUE)
#IDW Interpolation
# Create an empty grid where n is the total number of cells
grd              <- as.data.frame(spsample(stationdata_sp, "regular", n=50000))
names(grd)       <- c("EASTING", "NORTHING")
coordinates(grd) <- c("EASTING", "NORTHING")
gridded(grd)     <- TRUE  # Create SpatialPixel object
fullgrid(grd)    <- TRUE  # Create SpatialGrid object
# Add P's projection information to the empty grid
proj4string(grd) <- proj4string(stationdata_sp)
# Interpolate the grid cells using a power value of 2 (idp=2.0)
P.idw <- gstat::idw(lam.hat ~ 1, stationdata_sp, newdata=grd, idp=2.0)
# Convert to raster object
r <- raster(P.idw)
#plot(r)
# Plot
GG2<-tm_shape(r) +
tm_raster(n=10,palette = "RdBu", auto.palette.mapping = FALSE,
title=paste0("Predicted ",i," \n abundance \n (best model when \n comparing/combining \n layers)")) +
tm_shape(stationdata_sp) + tm_dots(size=0.2) +
tm_legend(legend.outside=TRUE)
tiff(paste0('3_outputs/figures/BestModelPredicted',i,'.tiff'), units="in", width=6, height=4.5, res=75)
GG2
dev.off()
tmap_save(GG2, width = 1000, height = 1000, units="px", filename = paste0("3_outputs/maps/BestModelPredicted",i,".png"))
}
library(lubridate)
library(unmarked)
library(MuMIn)
library(jpeg)
library(ggplot2)
library(grDevices)
library(dplyr)
library(stringr)
library(nmixgof)
library(spdep)
library(rgdal)
library(tmap)
library(raster)
library(gstat) # Use gstat's idw routine
library(sp)    # Used for the spsample function
kirby <- raster("0_data/raw/Kirby_CWD_Vol.tif")
Kirby.coord<-read.csv("0_data/raw/Kirby.coord.csv")
LCC <- CRS("+proj=utm +zone=12 +ellps=GRS80 +units=m +no_defs")
coordinates(Kirby.coord) <- Kirby.coord[,c("EASTING", "NORTHING")]
proj4string(Kirby.coord) <- LCC
#https://www.rdocumentation.org/packages/MuMIn/versions/1.43.15/topics/pdredge
#a website link showing where someone else has calculated R-squared
#as a goodness-of-fit statistic for an N-mixture model
#other option would be nmixgof package that came out in 2018, which
#I think does not communicate with MuMIn
#so while I don't know exactly why R-squared isn't generally used
#for N-mixture models, it is available
my.theme <- theme_classic() +
theme(text=element_text(size=10, family="Arial"),
axis.text.x=element_text(size=10),
axis.text.y=element_text(size=10),
axis.title.x=element_text(margin=margin(10,0,0,0)),
axis.title.y=element_text(margin=margin(0,10,0,0)),
axis.line.x=element_line(linetype=1),
axis.line.y=element_line(linetype=1))
my.theme2 <- theme_classic() +
theme(text=element_text(size=24, family="Arial"),
axis.text.x=element_text(size=24),
axis.text.y=element_text(size=24),
axis.title.x=element_text(margin=margin(10,0,0,0)),
axis.title.y=element_text(margin=margin(0,10,0,0)),
axis.line.x=element_line(linetype=1),
axis.line.y=element_line(linetype=1))
# Suppose we want to have set of models that exclude combinations of colinear
# variables, that are significantly (p < 0.05) correlated, with Pearson
# correlation coefficient equal to or larger than r = 0.7.
#https://github.com/cran/MuMIn/blob/master/demo/dredge.subset.R
is.correlated <- function(i, j, data, conf.level = .95, cutoff = .69, ...) {
if(j >= i) return(NA)
ct <- cor.test(data[, i], data[, j], conf.level = conf.level, ...)
ct$p.value > (1 - conf.level) || abs(ct$estimate) <= cutoff
}
# Need vectorized function to use with 'outer'
vCorrelated <- Vectorize(is.correlated, c("i", "j"))
Julian<-read.csv("0_data/processed/unmarked/Julian.csv",header=TRUE)
ObsCov<-list(as.matrix(Julian[,2:5]))
sitecov<-read.csv("0_data/processed/Kirby.alllayersandscales.csv",header=TRUE)
sitecov<-sitecov[,-1]
sitecov$Tremblingaspen_50<-sitecov$Tremblingaspen_50+sitecov$TremblingaspenMixCD_50+sitecov$TremblingaspenMixD_50+sitecov$TremblingaspenMixDC_50
sitecov$TremblingaspenMixCD_50<-NULL
sitecov$TremblingaspenMixD_50<-NULL
sitecov$TremblingaspenMixDC_50<-NULL
sitecov$Jackpine_50<-sitecov$Jackpine_50+sitecov$JackpineMixCD_50+sitecov$JackpineMixWet_50
sitecov$Jackpine_50JackpineMixCD_50<-NULL
sitecov$Jackpine_50JackpineMixWet_50<-NULL
sitecov$Tamarack_50<-sitecov$Tamarack_50+sitecov$TamarackMixCD_50+sitecov$TamarackMixDC_50
sitecov$TamarackMixCD_50<-NULL
sitecov$TamarackMixDC_50<-NULL
sitecov$Blackspruce_50<-sitecov$Blackspruce_50+sitecov$BlackspruceMixCD_50
sitecov$BlackspruceMixCD_50<-NULL
sitecov$Whitebirch_50<-sitecov$Whitebirch_50+sitecov$WhitebirchMixD_50
sitecov$WhitebirchMixD_50<-NULL
sitecov$Whitespruce_50<-sitecov$Whitespruce_50+sitecov$WhitespruceMixWet_50
sitecov$WhitespruceMixWet_50<-NULL
sitecov$Tremblingaspen_150<-sitecov$Tremblingaspen_150+sitecov$TremblingaspenMixCD_150+sitecov$TremblingaspenMixD_150+sitecov$TremblingaspenMixDC_150
sitecov$TremblingaspenMixCD_150<-NULL
sitecov$TremblingaspenMixD_150<-NULL
sitecov$TremblingaspenMixDC_150<-NULL
sitecov$Jackpine_150<-sitecov$Jackpine_150+sitecov$JackpineMixCD_150+sitecov$JackpineMixWet_150
sitecov$Jackpine_150JackpineMixCD_150<-NULL
sitecov$Jackpine_150JackpineMixWet_150<-NULL
sitecov$Tamarack_150<-sitecov$Tamarack_150+sitecov$TamarackMixCD_150+sitecov$TamarackMixDC_150
sitecov$TamarackMixCD_150<-NULL
sitecov$TamarackMixDC_150<-NULL
sitecov$Blackspruce_150<-sitecov$Blackspruce_150+sitecov$BlackspruceMixCD_150+sitecov$BlackspruceMixDC_150
sitecov$BlackspruceMixCD_150<-NULL
sitecov$BlackspruceMixDC_150<-NULL
sitecov$Whitebirch_150<-sitecov$Whitebirch_150+sitecov$WhitebirchMixD_150+sitecov$WhitebirchMixDC_150
sitecov$WhitebirchMixD_150<-NULL
sitecov$WhitebirchMixDC_150<-NULL
sitecov$Whitespruce_150<-sitecov$Whitespruce_150+sitecov$WhitespruceMixWet_150+sitecov$WhitespruceMixC_150+sitecov$WhitespruceMixCD_150
sitecov$WhitespruceMixWet_150<-NULL
sitecov$WhitespruceMixC_150<-NULL
sitecov$WhitespruceMixCD_150<-NULL
sitecov$Tremblingaspen_500<-sitecov$Tremblingaspen_500+sitecov$TremblingaspenMixCD_500+sitecov$TremblingaspenMixD_500+sitecov$TremblingaspenMixDC_500
sitecov$TremblingaspenMixCD_500<-NULL
sitecov$TremblingaspenMixD_500<-NULL
sitecov$TremblingaspenMixDC_500<-NULL
sitecov$Jackpine_500<-sitecov$Jackpine_500+sitecov$JackpineMixCD_500+sitecov$JackpineMixWet_500#+sitecov$Jackpine_500JackpineMixC_500
#sitecov$Jackpine_500JackpineMixC_500<-NULL
sitecov$Jackpine_500JackpineMixCD_500<-NULL
sitecov$Jackpine_500JackpineMixWet_500<-NULL
sitecov$Tamarack_500<-sitecov$Tamarack_500+sitecov$TamarackMixCD_500+sitecov$TamarackMixDC_500
sitecov$TamarackMixCD_500<-NULL
sitecov$TamarackMixDC_500<-NULL
sitecov$Blackspruce_500<-sitecov$Blackspruce_500+sitecov$BlackspruceMixCD_500+sitecov$BlackspruceMixDC_500
sitecov$BlackspruceMixCD_500<-NULL
sitecov$BlackspruceMixDC_500<-NULL
sitecov$Whitebirch_500<-sitecov$Whitebirch_500+sitecov$WhitebirchMixD_500+sitecov$WhitebirchMixDC_500
sitecov$WhitebirchMixD_500<-NULL
sitecov$WhitebirchMixDC_500<-NULL
sitecov$Whitespruce_500<-sitecov$Whitespruce_500+sitecov$WhitespruceMixWet_500+sitecov$WhitespruceMixC_500+sitecov$WhitespruceMixCD_500
sitecov$WhitespruceMixWet_500<-NULL
sitecov$WhitespruceMixC_500<-NULL
sitecov$WhitespruceMixCD_500<-NULL
sitecov$EASTING<-NULL
names<-c("WTSP")
for(i in names){
birddata<-read.csv(paste0("0_data/processed/unmarked/",i,".csv"),header=TRUE)
count=birddata[,2:5]
#same variable names in both data frames
#3. Now construct unmarkedPCount frame for mixture models
umf <- unmarkedFramePCount(y=count, siteCovs=sitecov,
obsCovs=list(Julian=Julian[,2:5]))# organize data
umf                            # take a look
summary(umf)
obsCovs(umf) <- scale(obsCovs(umf))
siteCovs(umf) <- scale(siteCovs(umf))
#parallel processing and using dredge
clusterType<-if(length(find.package("snow",
quiet=TRUE))) "SOCK" else "PSOCK"
clust<-try(makeCluster(getOption("cl.cores",4), type=clusterType))
clusterEvalQ(clust, library(unmarked))
clusterExport(clust, "umf")
#5. Run mixture models
#to dredge with parallel processing:
###global multilayer model
global_pcount <-pcount( ~ Julian
~Tremblingaspen_500+
Water_500+
wtage_500+
LandCover_NonVeg_v1_500+
Species_Popu_Bal_v1_500+
Species_Sali_Spp_v1_500+
S150.sd_PercCanopyDensity,
mixture="P",
data = umf)
print(paste0('Global multilayer model run for ',i))
site.covs.mat<-sitecov[,c("Tremblingaspen_500",
"Water_500",
"wtage_500",
"LandCover_NonVeg_v1_500",
"Species_Popu_Bal_v1_500",
"Species_Sali_Spp_v1_500",
"S150.sd_PercCanopyDensity")]
# Create logical matrix
smat <- outer(1:7, 1:7, vCorrelated, data = site.covs.mat)
nm <- colnames(site.covs.mat)#[-1]
dimnames(smat) <- list(nm, nm)
system.time(dredge_pcount<-pdredge(global_pcount,
subset=smat,
rank=AIC,
m.lim=c(1,3),
cluster=clust,
extra = "R^2"))#,fixed=c("p(Julian)")
print(paste0('Multilayer model dredge run for ',i))
length(dredge_pcount)
nrow(dredge_pcount)#
bestmodels<-get.models(dredge_pcount, subset=delta<24.5)#x
#absolute model fit
df.dredge<-data.frame(dredge_pcount)
df.dredge<-df.dredge[df.dredge$delta<24.5,]
r2<-df.dredge$R.2
#write.csv(df.dredge, file=paste0("0_data/processed/unmarked/results/",i,"dredge.csv"))
ms<-modSel(fitList(fits = structure(bestmodels, names = model.names(bestmodels,
labels = getAllTerms(global_pcount)))))
ms.coef<-coef(ms)
ms.SE<-SE(ms)
output<-as(ms,"data.frame")
outputB<-cbind(output,r2)
write.csv(outputB, file=paste0("0_data/processed/unmarked/results/",i,"bestmodels.csv"))
print(paste0('Multilayer model outputs printed for ',i))
#get variables and estimates of their uncertainty from top model
topfinalmodel<-get.models(dredge_pcount, subset = 1)[[1]]
Estimate<-coef(topfinalmodel, type='state', altNames = TRUE)
SE<-SE(topfinalmodel, type='state', altNames = TRUE)
lam.df<-data.frame(Estimate,SE)
lam.df$Predictor<-row.names(lam.df)
Estimate<-coef(topfinalmodel, type='det', altNames = TRUE)
SE<-SE(topfinalmodel, type='det', altNames = TRUE)
P.df<-data.frame(Estimate,SE)
P.df$Predictor<-row.names(P.df)
total.df<-bind_rows(lam.df,P.df)
total.df$LCL<-total.df$Estimate-1.96*total.df$SE
total.df$UCL<-total.df$Estimate+1.96*total.df$SE
total.df<-total.df[,c("Predictor","Estimate","SE","LCL","UCL")]
write.csv(total.df, file=paste0("3_outputs/tables/topmodel",i,".csv"))
#box plot
#shorten predictor names
total.df$Predictor<- gsub("_v1_", "_", total.df$Predictor) # new descriptor for harvest class in v.2018 cure4insect
total.df$Predictor<- gsub("Structure_Stand_", "", total.df$Predictor) # new descriptor for harvest class in v.2018 cure4insect
total.df$Predictor<- gsub("Species_", "", total.df$Predictor) # new descriptor for harvest class in v.2018 cure4insect
total.df$Predictor<- gsub("SpeciesGroups_", "", total.df$Predictor) # new descriptor for harvest class in v.2018 cure4insect
total.df$Predictor<- gsub("_Grid.1x1m", "", total.df$Predictor) # new descriptor for harvest class in v.2018 cure4insect
#total.df<-total.df[!total.df$Predictor=="lam(Int)",]
#total.df<-total.df[!total.df$Predictor=="p(Int)",]
GG<-ggplot(total.df, aes(x=Predictor, y=Estimate))+
geom_point(aes(x=Predictor, y=Estimate))+
geom_errorbar(aes(ymin=LCL,ymax=UCL))+
geom_hline(yintercept=0)+
xlab("Predictor")+
ylab(paste0("Effect on lam(",i,") or det(",i,")"))+my.theme+
scale_x_discrete(labels = function(x) lapply(strwrap(x, width = 10, simplify = FALSE), paste, collapse="\n"))
ggsave(paste0("3_outputs/figures/",i,"topmodel.png"), plot=GG, width=12, height=6, units=c("in"), dpi=300)
#An estimate of overdispersion relative to the fitted model.
chat(topfinalmodel, "m")#0.935812 (marginal)
chat(topfinalmodel, "s")#0.9500872 (site-sum)
chat(topfinalmodel, "o")#0.9702225 (observation)
residcov(topfinalmodel, xlim=c(-10,10))
#plot residuals against fitted values
residfit(topfinalmodel, type="m") # (marginal)
residfit(topfinalmodel, "s") # (site-sum)
residfit(topfinalmodel, "o") #(observation)
#randomized quantile residuals vs. normal standardized quantiles
residqq(topfinalmodel, type = "site-sum", main = "Residual qq plot",
plotLine = TRUE)
residqq(topfinalmodel, type = "o", main = "Residual qq plot",
plotLine = TRUE)
#residuals look good: hug the centre line of various Q-Q plots, do
#not vary in any obvious way with increasing fitted values, and
#c-hat values for the 3 kinds of quantile residuals are approximately 1
#get predictions from best model and validate best model
umf_val<-umf#same data set set up as an occupancy modelling frame
p.hat <- predict(topfinalmodel, newdata=umf_val, type="det")[,1]
lam.hat <- predict(topfinalmodel, newdata=umf_val, type="state")[,1]
pred.abund<-data.frame(lam.hat)
pred.abund$SS<-Kirby.coord$SS
stationdata_sp <- merge(Kirby.coord, pred.abund, by.x = "SS", by.y = "SS")
str(stationdata_sp)
plot(stationdata_sp, col=stationdata_sp$lam.hat)
stationdata_sp@bbox
stationdata_sp@coords
#plot(kirby)
#Create a function to generate a continuous color palette
rbPal <- colorRampPalette(c('red','green'))
plot(stationdata_sp, add=TRUE, pch=20, col=rbPal(10)[as.numeric(cut(stationdata_sp$lam.hat, breaks = 10))])
# Replace point boundary extent with that of Kirby grid
coords = matrix(c(488000, 6131500,
488000, 6137500,
496000, 6137500,
496000, 6131500,
488000, 6131500),
ncol = 2, byrow = TRUE)
P1 = Polygon(coords)
Ps1 = SpatialPolygons(list(Polygons(list(P1), ID = "a")), proj4string=CRS("+proj=utm +zone=12 +ellps=GRS80 +units=m +no_defs"))
#plot(Ps1, axes = TRUE)
#plot(stationdata_sp, add=TRUE, pch=20, col=rbPal(10)[as.numeric(cut(stationdata_sp$lam.hat, breaks = 10))])
stationdata_sp@bbox<-Ps1@bbox
tm_shape(Ps1) + tm_polygons() +
tm_shape(stationdata_sp) +
tm_dots(col="lam.hat", palette = "RdBu", auto.palette.mapping = FALSE,
title=paste0("Predicted ",i," abund \n(per station)"), size=0.7) +
tm_legend(legend.outside=TRUE)
#IDW Interpolation
# Create an empty grid where n is the total number of cells
grd              <- as.data.frame(spsample(stationdata_sp, "regular", n=50000))
names(grd)       <- c("EASTING", "NORTHING")
coordinates(grd) <- c("EASTING", "NORTHING")
gridded(grd)     <- TRUE  # Create SpatialPixel object
fullgrid(grd)    <- TRUE  # Create SpatialGrid object
# Add P's projection information to the empty grid
proj4string(grd) <- proj4string(stationdata_sp)
# Interpolate the grid cells using a power value of 2 (idp=2.0)
P.idw <- gstat::idw(lam.hat ~ 1, stationdata_sp, newdata=grd, idp=2.0)
# Convert to raster object
r <- raster(P.idw)
#plot(r)
# Plot
GG2<-tm_shape(r) +
tm_raster(n=10,palette = "RdBu", auto.palette.mapping = FALSE,
title=paste0("Predicted ",i," \n abundance \n (best model when \n comparing/combining \n layers)")) +
tm_shape(stationdata_sp) + tm_dots(size=0.2) +
tm_legend(legend.outside=TRUE)
tiff(paste0('3_outputs/figures/BestModelPredicted',i,'.tiff'), units="in", width=6, height=4.5, res=75)
GG2
dev.off()
tmap_save(GG2, width = 1000, height = 1000, units="px", filename = paste0("3_outputs/maps/BestModelPredicted",i,".png"))
}
